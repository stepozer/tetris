/*================ Модуль создания объектов =================*/

extern int Telo[n][m];

/*================= Перечень функций модуля =================*/
rpaHuLLa (int Telo[n][m]);           // Создание границ
DLL(char *str);                      // Создание списка
NotDLL();                            // Удаление списка 
copy(int mas1[4][4],int mas2[4][4]); // Копирование массива
HoBaa();                             // Создание новой фигуры  
/*===================== Создание границ =====================*/
rpaHuLLa (int Telo[n][m])
{
  int i,j;
  for(j=0;j<m;j++)
    Telo[n-1][j]=2;
  for(i=0;i<n;i++)
    {
     Telo[i][0]=2;
     Telo[i][m-1]=2;
    }
  return 0;
}
/*===================== Создание списка =====================*/
DLL(char *str)
{
  int i,j;
  if ((f=fopen(str,"r"))==NULL)
    {
      printf("Error");
      return 0;
    }
  fscanf(f,"%d",&zzz.ropu3);
  fscanf(f,"%d",&zzz.BepT);
  fscanf(f,"%d",&zzz.rop2);
  fscanf(f,"%d",&zzz.Bep2);
  for(i=0;i<4;i++)
    for(j=0;j<4;j++)
      fscanf(f,"%d",&zzz.mas[i][j]);
  New=(struct nonpaBka *)malloc(sizeof (struct nonpaBka));
  New->ropu3=zzz.ropu3;
  New->BepT=zzz.BepT;
  New->rop2=zzz.rop2;
  New->Bep2=zzz.Bep2;
  for(i=0;i<4;i++)
   for(j=0;j<4;j++)
     New->mas[i][j]=zzz.mas[i][j];

  New->left=NULL;
  New->right=NULL;
  Hazalo=New;
  Right=New;
  fscanf(f,"%d",&zzz.ropu3);
  while(zzz.ropu3!=666)
    {
     fscanf(f,"%d",&zzz.BepT);
     fscanf(f,"%d",&zzz.rop2);
     fscanf(f,"%d",&zzz.Bep2);
     for(i=0;i<4;i++)
      for(j=0;j<4;j++)
       fscanf(f,"%d",&zzz.mas[i][j]);

     New=(struct nonpaBka *)malloc(sizeof(struct nonpaBka));
     New->ropu3=zzz.ropu3;
     New->BepT=zzz.BepT;
     New->rop2=zzz.rop2;
     New->Bep2=zzz.Bep2;
     for(i=0;i<4;i++)
      for(j=0;j<4;j++)
	New->mas[i][j]=zzz.mas[i][j];

     New->left=NULL;
     New->right=Right;
     Right->left=New;
     Right=New;

     fscanf(f,"%d",&zzz.ropu3);
    }
  Hazalo->right=Right;
  Right->left=Hazalo;
  fclose(f);
  Right->left=Hazalo;
  return 0;
}
/*===================== Удаление списка =====================*/
NotDLL()
{
  free(Hazalo->left->left->left);
  free(Hazalo->left->left);
  free(Hazalo->left);
  free(Hazalo);
  return 0;
}
/*==================== Копирование массива ==================*/
copy(int mas1[4][4],int mas2[4][4])
{
  int i,j;
  for(i=0;i<4;i++)
   for(j=0;j<4;j++)
     mas1[i][j]=mas2[i][j];
  return 0;
}
/*=================== Создание новой фигуры =================*/
HoBaa ()
{
  int i,j,lala,d;
  lala=random(28);
  switch (lala)
  {
    case 0: case 1: case 2: case 3: NotDLL(); DLL("F1_4.txt");
    if(lala==0) { 
                  copy(FFF,F1); 
                  Temp=Hazalo;                   
                  break; 
                }
    if(lala==1) { 
                  copy(FFF,F2); 
 		  Temp=Hazalo->left;
                  break; 
                }
    if(lala==2) { 
                  copy(FFF,F3); 
                  Temp=Hazalo->left->left;
                  break; 
                }
    if(lala==3) { 
                  copy(FFF,F4); 
                  Temp=Hazalo->left->left->left; 
                  break; 
                }

    case 4: case 5: case 6: case 7: NotDLL(); DLL("F5_8.txt");
    if(lala==4) { 
                  copy(FFF,F5); 
                  Temp=Hazalo;                   
                  break; 
                }
    if(lala==5) { 
                  copy(FFF,F6); 
                  Temp=Hazalo->left;
           	  break;
                }
    if(lala==6) { 
                  copy(FFF,F7); 
                  Temp=Hazalo->left->left;
                  break; 
                }
    if(lala==7) { 
                  copy(FFF,F8); 
                  Temp=Hazalo->left->left->left; 
                  break; 
                }

    case 8: case 9: case 10: case 11: NotDLL(); DLL("F9_12.txt");
    if(lala== 8) { copy(FFF,F9 ); Temp=Hazalo;                   break; }
    if(lala== 9) { copy(FFF,F10); Temp=Hazalo->left;  	       break; }
    if(lala==10) { copy(FFF,F11); Temp=Hazalo->left->left;       break; }
    if(lala==11) { copy(FFF,F12); Temp=Hazalo->left->left->left; break; }

    case 12: case 13: case 14: case 15: NotDLL(); DLL("F13_16.txt");
    if(lala==12) { copy(FFF,F13); Temp=Hazalo;                   break; }
    if(lala==13) { copy(FFF,F14); Temp=Hazalo->left; 	       break; }
    if(lala==14) { copy(FFF,F15); Temp=Hazalo->left->left;       break; }
    if(lala==15) { copy(FFF,F16); Temp=Hazalo->left->left->left; break; }
  
case 16: case 17: case 18: case 19: NotDLL(); DLL("F17_20.txt");
    if(lala==16) { copy(FFF,F17); Temp=Hazalo;                   break; }
    if(lala==17) { copy(FFF,F18); Temp=Hazalo->left; 	         break; }
    if(lala==18) { copy(FFF,F19); Temp=Hazalo->left->left;       break; }
    if(lala==19) { copy(FFF,F20); Temp=Hazalo->left->left->left; break; }

    case 20: case 21: case 22: case 23: NotDLL(); DLL("F21_24.txt");
    if(lala==20) { copy(FFF,F21); Temp=Hazalo;                   break; }
    if(lala==21) { copy(FFF,F22); Temp=Hazalo->left; 	         break; }
    if(lala==22) { copy(FFF,F23); Temp=Hazalo->left->left;       break; }
    if(lala==23) { copy(FFF,F24); Temp=Hazalo->left->left->left; break; }

    case 24: case 25: case 26: case 27: NotDLL(); DLL("F25_28.txt");
    if(lala==24) { copy(FFF,F25); Temp=Hazalo;                   break; }
    if(lala==25) { copy(FFF,F26); Temp=Hazalo->left; 	         break; }
    if(lala==26) { copy(FFF,F27); Temp=Hazalo->left->left;       break; }
    if(lala==27) { copy(FFF,F28); Temp=Hazalo->left->left->left; break; }
  
}
  int b=0; 
  int TTT=Time;
  char sym;
  for(i=3;i>-1;i--)
    {
      if (b!=0){ d=m/2+b; }
       else d=m/2;
      if (
           (Telo[0][d]==3)||
           (Telo[0][d+1]==3)|| 
           (Telo[0][d+2]==3)||
           (Telo[0][d+3]==3)
         ) { G_O=1; return 0;}  
      
      for(j=0;j<4;j++,d++)
	Telo[0][d]=FFF[i][j];
      if (OCTAHOBKA1()==0) BBB(TTT);
      if(kbhit()) sym=getch();
      if(sym==KEY[1])      {if(!OCTAHOBKA2()) RRR(); b++;} 
       else if(sym==KEY[0]) {if(!OCTAHOBKA3()) LLL(); b--;}
        else if(sym==KEY[2]) TTT=Time/4;
         else if(sym==KEY[6]) exit(1);
           else if(sym==KEY[5]) Pause(); 
      
    }
  if(sym=='w') YckopeHue();
  return 0;
}

